{
  "hash": "40e6830ebe50f44b8118e61309525d3a",
  "result": {
    "markdown": "---\ntitle: \"Tabular Data and Basic Data Operations\"\n---\n\n## Introduction\n\nThis document demonstrates the use of the `pandas` library in Python to do basic data wrangling and summarization.\n\n::: callout-note\nIf you do not have the `pandas` library installed then you will need to run\n\n`pip install pandas`\n\nin the Jupyter terminal to install. **Remember:** you only need to install once per machine (or Colab session, for packages that don't come pre-installed).\n:::\n\n## Reading Tabular Data into Python\n\nWe're going to be exploring `pandas` in the context of the famous Titanic dataset. We'll work with a subset of this dataset, but more information about it all can be found [here](https://www.kaggle.com/competitions/titanic/data).\n\nWe start by loading the `numpy` and `pandas` libraries. Most of our data wrangling work will happen with functions from the `pandas` library, but the `numpy` library will be useful for performing certain mathematical operations should we choose to transform any of our data.\n\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n```\n\n\n``` {.python .cell-code}\ndata_dir = \"https://dlsun.github.io/pods/data/\"\ndf_titanic = pd.read_csv(data_dir + \"titanic.csv\")\n```\n\n\n:::{.callout-example .icon}\n\nWe've already seen `read_csv()` used many times for importing CSV files into Python, but it bears repeating. \n\n:::\n\nData files of many different types and shapes can be read into Python with similar functions, but we will focus on tabular data.\n\n### Tidy Data is Special Tabular Data\n\nFor most people, the image that comes to mind when thinking about data is indeed something tabular or spreadsheet-like in nature. **Which is great!**\n\nTabular data is a form preferred by MANY different data operations and work. However, we will want to take this one step further. In almost all data science work we want our data to be **tidy**\n\n:::{.callout-note}\n\nA dataset is **tidy** if it adheres to following three characteristics:\n\n* Every column is a variable\n\n* Every row is an observation\n\n* Every cell is a single value\n\n:::\n\n![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png)\n\n:::{.callout-check-in .icon}\n\nWith 2-3 people around you, navigate to the [GapMinder Data](https://www.gapminder.org/data/) site and download a single CSV file of your choice. Open it up in Excel or your application of choice. Is this dataset *tidy*? If not, then what would have to change to make it *tidy*?\n\n:::\n\n:::{.callout-learn-more .icon}\nThe term \"tidy data\" was first popularized in [this paper](https://vita.had.co.nz/papers/tidy-data.pdf) by R developer Hadley Wickham.\n:::\n\nYou may have noticed that `plotnine` (`ggplot`) is basically built to take *tidy* data. Variables are specified in the aesthetics function to map them (i.e. columns) in our dataset to plot elements. This type of behavior is **EXTREMELY** common among functions that work with data in all languages, and so the importance of getting our data into a *tidy* format cannot be overstated.\n\nIn Python, there are at least two quick ways to view a dataset we've read in:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf_titanic\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abbing, Mr. Anthony</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>5547.0</td>\n      <td>7.11</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Abbott, Mr. Eugene Joseph</td>\n      <td>male</td>\n      <td>13.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Abbott, Mr. Rossmore Edward</td>\n      <td>male</td>\n      <td>16.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Abelseth, Miss. Karen Marie</td>\n      <td>female</td>\n      <td>16.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Norway</td>\n      <td>348125.0</td>\n      <td>7.13</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2202</th>\n      <td>Wynn, Mr. Walter</td>\n      <td>male</td>\n      <td>41.0</td>\n      <td>deck crew</td>\n      <td>B</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2203</th>\n      <td>Yearsley, Mr. Harry</td>\n      <td>male</td>\n      <td>40.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2204</th>\n      <td>Young, Mr. Francis James</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>engineering crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2205</th>\n      <td>Zanetti, Sig. Minio</td>\n      <td>male</td>\n      <td>20.0</td>\n      <td>restaurant staff</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2206</th>\n      <td>Zarracchi, Sig. L.</td>\n      <td>male</td>\n      <td>26.0</td>\n      <td>restaurant staff</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2207 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf_titanic.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abbing, Mr. Anthony</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>5547.0</td>\n      <td>7.11</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Abbott, Mr. Eugene Joseph</td>\n      <td>male</td>\n      <td>13.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Abbott, Mr. Rossmore Edward</td>\n      <td>male</td>\n      <td>16.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Abelseth, Miss. Karen Marie</td>\n      <td>female</td>\n      <td>16.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Norway</td>\n      <td>348125.0</td>\n      <td>7.13</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe latter (`.head()`) is usually preferred in case the dataset is large.\n\n:::{.callout-check-in .icon}\n\nDoes the titanic dataset appear to be in *tidy* format?\n\n:::\n\n\n## The \"Big Five\" Verbs of Data Wrangling\n\nData wrangling can involve a lot of different steps and operations to get data into a *tidy* format and ready for analysis and visualization. The vast majority of these fall under the umbrella one the following five operations:\n\n1. **Select** columns/variables of interest\n\n2. **Filter** rows/observations of interest\n\n3. **Arrange** the rows of a dataset by column(s) of interest (i.e. order or sort)\n\n4. **Mutate** the columns of a dataset (i.e. create or transform variables)\n\n5. **Summarize** the rows of a dataset for column(s) of interest\n\n\n### **Select** Columns/Variables\n\nSuppose we want to select the `age` varible from the titanic `DataFrame`. There are three ways to do this.\n\n1. Use `.loc`, specifying both the rows and columns. (The colon `:` is Python shorthand for \"all\".)\n\n``` {.python .cell-code}\ndf_titanic.loc[:, \"age\"]\n```\n\n\n2. Access the column as you would a key in a `dict`.\n\n``` {.python .cell-code}\ndf_titanic[\"age\"]\n```\n\n\n3. Access the column as an attribute of the `DataFrame`.\n\n``` {.python .cell-code}\ndf_titanic.age\n```\n\n\nMethod 3 (attribute access) is the most concise. However, it does not work if the variable name contains spaces or special characters, begins with a number, or matches an existing attribute of the `DataFrame`. So, methods 1 and 2 are usually safer and preferred.\n\nTo select multiple columns, you would pass in a *list* of variable names, instead of a single variable name. For example, to select both `age` and `fare`, either of the two methods below would work (and produce the same result):\n\n``` {.python .cell-code}\n# Method 1\ndf_titanic.loc[:, [\"age\", \"fare\"]].head()\n\n# Method 2\ndf_titanic[[\"age\", \"fare\"]].head()\n```\n\n\n### **Filter** Rows/Observations\n\n#### Selecting Rows/Observations by Location\n\nBefore we see how to **filter** (i.e. **subset**) the rows of dataset based on some condition, let's see how to select rows by explicitly identifying them.\n\nWe can select a row by its position using the `.iloc` attribute. Keeping in mind that the first row is actually row 0, the fourth row could be extracted as:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf_titanic.iloc[3]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nname        Abbott, Mrs. Rhoda Mary 'Rosa'\ngender                              female\nage                                   39.0\nclass                                  3rd\nembarked                                 S\ncountry                            England\nticketno                            2673.0\nfare                                 20.05\nsurvived                                 1\nName: 3, dtype: object\n```\n:::\n:::\n\n\nNotice that a single row from a `DataFrame` is no longer a `DataFrame` but a different data structure, called a `Series`.\n\nWe can also select multiple rows by passing a *list* of positions to `.iloc`.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf_titanic.iloc[[1, 3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Abbott, Mr. Eugene Joseph</td>\n      <td>male</td>\n      <td>13.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.05</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNotice that when we select multiple rows, we get a `DataFrame` back.\n\nSo a `Series` is used to store a single observation (across multiple variables), while a `DataFrame` is used to store multiple observations (across multiple variables).\n\nIf selecting consecutive rows, we can use Python's `slice` notation. For example, the code below selects all rows from the fourth row, up to (but not including) the tenth row.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf_titanic.iloc[3:9]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.0500</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Abelseth, Miss. Karen Marie</td>\n      <td>female</td>\n      <td>16.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Norway</td>\n      <td>348125.0</td>\n      <td>7.1300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Abelseth, Mr. Olaus Jørgensen</td>\n      <td>male</td>\n      <td>25.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>348122.0</td>\n      <td>7.1300</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>Abelson, Mr. Samuel</td>\n      <td>male</td>\n      <td>30.0</td>\n      <td>2nd</td>\n      <td>C</td>\n      <td>France</td>\n      <td>3381.0</td>\n      <td>24.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>Abelson, Mrs. Hannah</td>\n      <td>female</td>\n      <td>28.0</td>\n      <td>2nd</td>\n      <td>C</td>\n      <td>France</td>\n      <td>3381.0</td>\n      <td>24.0000</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Abī-Al-Munà, Mr. Nāsīf Qāsim</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Lebanon</td>\n      <td>2699.0</td>\n      <td>18.1509</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### Selecting Rows/Observations by Condition\n\nWe'll often want to **filter** or **subset** the rows of a dataset based on some condition. To do this we'll take advantage of **vectorization** and **boolean masking**.\n\nRecall that we can compare the values of a variable/column to a particular value in the following way, and observe the result.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf_titanic[\"age\"] > 30\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0        True\n1       False\n2       False\n3        True\n4       False\n        ...  \n2202     True\n2203     True\n2204     True\n2205    False\n2206    False\nName: age, Length: 2207, dtype: bool\n```\n:::\n:::\n\n\nWe can use these `True` and `False` values to filter/subset the dataset! The following subsets the titanic dataset down to only those individuals (rows) with ages over 30.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_titanic[df_titanic[\"age\"] > 30]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Abbing, Mr. Anthony</td>\n      <td>male</td>\n      <td>42.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>5547.0</td>\n      <td>7.1100</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.0500</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Ahlin, Mrs. Johanna Persdotter</td>\n      <td>female</td>\n      <td>40.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>7546.0</td>\n      <td>9.0906</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Aldworth, Mr. Augustus Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>2nd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>248744.0</td>\n      <td>13.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>373450.0</td>\n      <td>8.0100</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2197</th>\n      <td>Worthman, Mr. William Henry</td>\n      <td>male</td>\n      <td>37.0</td>\n      <td>engineering crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2200</th>\n      <td>Wright, Mr. William</td>\n      <td>male</td>\n      <td>40.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2202</th>\n      <td>Wynn, Mr. Walter</td>\n      <td>male</td>\n      <td>41.0</td>\n      <td>deck crew</td>\n      <td>B</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2203</th>\n      <td>Yearsley, Mr. Harry</td>\n      <td>male</td>\n      <td>40.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2204</th>\n      <td>Young, Mr. Francis James</td>\n      <td>male</td>\n      <td>32.0</td>\n      <td>engineering crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>984 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can combine multiple conditions using `&` (and) and `|` (or). The following subsets the titanic dataset down to females over 30 years of age.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_titanic[(df_titanic[\"age\"] > 30) & (df_titanic[\"gender\"] == \"female\")]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>Abbott, Mrs. Rhoda Mary 'Rosa'</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2673.0</td>\n      <td>20.0500</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Ahlin, Mrs. Johanna Persdotter</td>\n      <td>female</td>\n      <td>40.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>7546.0</td>\n      <td>9.0906</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>35</th>\n      <td>Andersson, Miss. Ida Augusta Margareta</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347091.0</td>\n      <td>7.1506</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>40</th>\n      <td>Andersson, Mrs. Alfrida Konstantia Brogren</td>\n      <td>female</td>\n      <td>39.0</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347082.0</td>\n      <td>31.0506</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>44</th>\n      <td>Andrews, Miss. Kornelia Theodosia</td>\n      <td>female</td>\n      <td>62.0</td>\n      <td>1st</td>\n      <td>C</td>\n      <td>United States</td>\n      <td>13502.0</td>\n      <td>77.1902</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1997</th>\n      <td>Robinson, Mrs. Annie</td>\n      <td>female</td>\n      <td>41.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2059</th>\n      <td>Smith, Miss. Katherine Elizabeth</td>\n      <td>female</td>\n      <td>45.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2076</th>\n      <td>Stap, Miss. Sarah Agnes</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2143</th>\n      <td>Wallis, Mrs. Catherine Jane</td>\n      <td>female</td>\n      <td>36.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>England</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2145</th>\n      <td>Walsh, Miss. Catherine</td>\n      <td>female</td>\n      <td>32.0</td>\n      <td>victualling crew</td>\n      <td>S</td>\n      <td>Ireland</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>206 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-check-in .icon}\n\nWith the 2-3 people around you, how would you find the just the names of the males under 20 years of age who survived (in the titanic dataset) with a single line of code?\n\n:::\n\n### **Arrange** Rows\n\nAs part of exploratory data analysis and some reporting efforts, we will want to sort a dataset or set of results by one or more variables of interest.\n\nWe can do this with `.sort_values` in either *ascending* or *descending* order. \n\nThe following sorts the titanic dataset by `age` in decreasing order.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_titanic.sort_values(by = [\"age\"], ascending=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1176</th>\n      <td>Svensson, Mr. Johan</td>\n      <td>male</td>\n      <td>74.000000</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347060.0</td>\n      <td>7.1506</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>820</th>\n      <td>Mitchell, Mr. Henry Michael</td>\n      <td>male</td>\n      <td>72.000000</td>\n      <td>2nd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>24580.0</td>\n      <td>10.1000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>Artagaveytia, Mr. Ramon</td>\n      <td>male</td>\n      <td>71.000000</td>\n      <td>1st</td>\n      <td>C</td>\n      <td>Argentina</td>\n      <td>17609.0</td>\n      <td>49.1001</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>456</th>\n      <td>Goldschmidt, Mr. George B.</td>\n      <td>male</td>\n      <td>71.000000</td>\n      <td>1st</td>\n      <td>C</td>\n      <td>United States</td>\n      <td>17754.0</td>\n      <td>34.1301</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>282</th>\n      <td>Crosby, Captain. Edward Gifford</td>\n      <td>male</td>\n      <td>70.000000</td>\n      <td>1st</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>5735.0</td>\n      <td>71.0000</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1182</th>\n      <td>Tannūs, Master. As'ad</td>\n      <td>male</td>\n      <td>0.416667</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Lebanon</td>\n      <td>2625.0</td>\n      <td>8.1004</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>296</th>\n      <td>Danbom, Master. Gilbert Sigvard Emanuel</td>\n      <td>male</td>\n      <td>0.333333</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347080.0</td>\n      <td>14.0800</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>Dean, Miss. Elizabeth Gladys 'Millvina'</td>\n      <td>female</td>\n      <td>0.166667</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2315.0</td>\n      <td>20.1106</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>439</th>\n      <td>Gheorgheff, Mr. Stanio</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Bulgaria</td>\n      <td>349254.0</td>\n      <td>7.1711</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>677</th>\n      <td>Kraeff, Mr. Theodor</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Bulgaria</td>\n      <td>349253.0</td>\n      <td>7.1711</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>2207 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-note}\nNotice that in these last few sections, we have not made any *permanent* changes to the `df_titanic` object.  We have only asked python do some selecting/filtering/sorting and then to print out the results, not save them.\n\nIf we wanted `df_titanic` to become permanently sorted by age, we would **re-assign** the object:\n\n``` {.python .cell-code}\ndf_titanic = df_titanic.sort_values(by = [\"age\"], ascending=False)\n```\n\n\n:::\n\n:::{.callout-warning}\n\nYou will sometimes see object reassignment happen in a different way, using an `inplace = True` argument, like this:\n\n``` {.python .cell-code}\ndf_titanic.sort_values(by = [\"age\"], ascending=False, inplace=True)\n```\n\n\nWe strongly recommend **against** this approach, for two reason:\n\n1. When an object is \"overwritten\" via reassignment, that's a major decision; you lose the old version of the object.  It should be made deliberately and obviously.  The `inplace` argument is easy to miss when copying/editing code, so it can lead to accidental overwriting that is hard to keep track of.\n\n2. Not all functions of DataFrames have an `inplace` option.  It can be frustrating to get into the habit of using it, only to find out the hard way that it's not available half the time!\n:::\n\n### **Mutate** Column(s)\n\nThe variables available to us in our original dataset contain all of the information we have access to, but the best insights may instead come from transformations of those variables. \n\n#### Transforming Quantitative Variables\n\nOne of the simplest reasons to want to transform a quantitative variable is to change the measurement units. \n\nHere we change the `age` of passengers from a value in years to a value in decades.\n\n``` {.python .cell-code}\ndf_titanic[\"age\"] = df_titanic[\"age\"] / 10\n```\n\n\nIf we have a quantitative variable that is particularly skewed, then it might be a good idea to transform the values of that variable...like taking the `log` of the values.\n\n:::{.callout-note}\n\nThis was a strategy you saw employed with the GapMinder data!\n\n:::\n\nBelow is an example of taking the `log` of the `fare` variable. Notice that we're making use of the `numpy` here to take the `log`.\n\n``` {.python .cell-code}\ndf_titanic[\"fare\"] = np.log(df_titanic[\"fare\"])\n```\n\n\nRemember that we can take advantage of **vectorization** here too. The following operation wouldn't really make physical sense, but it's an example of **creating a new variable** out of existing variables.\n\n``` {.python .cell-code}\ndf_titanic[\"nonsense\"] = df_titanic[\"fare\"] / df_titanic[\"age\"]\n```\n\n\nNote that we created the new variable, `nonsense`, by specifying on the left side of the `=` here and populating that column/variable via the expression on the right side of the `=`.\n\nWe could want to create a new variable by categorizing (or discretizing) the values of a quantitative variable (i.e. convert a quantitative variable to a categorical variable). We can do so with `cut`.\n\nIn the following, we create a new `age_cat` variable which represents whether a person is a child or an adult.\n\n``` {.python .cell-code}\ndf_titanic[\"age_cat\"] = pd.cut(df_titanic[\"age\"],\n                              bins = [0, 18, 100],\n                              labels = [\"child\", \"adult\"])\n```\n\n\n:::{.callout-check-in .icon}\nConsider the four mutations we just performed.  In which ones did we **reassign** a column of the dataset, thus *replacing* the old values with new ones?  In which ones did we **create** a brand-new column, thus retaining the old column(s) that were involved in the calculation?\n:::\n\n#### Transforming Categorical Variables\n\nIn some situations, especially later with modeling, we'll need to convert categorical variables (stored as text) into quantitative (often coded) variables. Binary categorical variables can be converted into quantitative variables by coding one category as 1 and the other category as 0. (In fact, the **survived** column in the titanic dataset has already been coded this way.) The easiest way to do this is to create a boolean mask. For example, to convert `gender` to a quantitative variable `female`, which is 1 if the passenger was female and 0 otherwise, we can do the following:\n\n``` {.python .cell-code}\ndf_titanic[\"female\"] = 1 * (df_titanic[\"gender\"] == \"female\")\n```\n\n\nWhat do we do about a categorical variable with more than twwo categories, like `embarked`, which has four categories? In general, a categorical variable with **K** categories can be converted into **K** separate 0/1 variables, or **dummy variables**. Each of the **K** dummy variables is an indicator for one of the **K** categories. That is, a dummy variable is 1 if the observation fell into its particular category and 0 otherwise.\n\nAlthough it is not difficult to create dummy variables manually, the easiest way to create them is the `get_dummies()` function in `pandas`.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\npd.get_dummies(df_titanic[\"embarked\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>B</th>\n      <th>C</th>\n      <th>Q</th>\n      <th>S</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1176</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>820</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>456</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>282</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1182</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>296</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>False</td>\n      <td>False</td>\n      <td>False</td>\n      <td>True</td>\n    </tr>\n    <tr>\n      <th>439</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n    <tr>\n      <th>677</th>\n      <td>False</td>\n      <td>True</td>\n      <td>False</td>\n      <td>False</td>\n    </tr>\n  </tbody>\n</table>\n<p>2207 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe may also want to change the levels of a categorical variable. A categorical variable can be transformed by mapping its levels to new levels. For example, we may only be interested in whether a person on the titanic was a passenger or a crew member. The variable `class` is too detailed. We can create a new variable, `type`, that is derived from the existing variable `class`. Observations with a `class` of \"1st\", \"2nd\", or \"3rd\" get a value of \"passenger\", while observations with a `class` of \"deck crew\", \"engineering crew\", or \"deck crew\" get a value of \"crew\".\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf_titanic[\"type\"] = df_titanic[\"class\"].map({\n    \"1st\": \"passenger\",\n    \"2nd\": \"passenger\",\n    \"3rd\": \"passenger\",\n    \"victualling crew\": \"crew\",\n    \"engineering crew\": \"crew\",\n    \"deck crew\": \"crew\"\n})\n\ndf_titanic\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>name</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>class</th>\n      <th>embarked</th>\n      <th>country</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n      <th>nonsense</th>\n      <th>age_cat</th>\n      <th>female</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1176</th>\n      <td>Svensson, Mr. Johan</td>\n      <td>male</td>\n      <td>7.400000</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347060.0</td>\n      <td>1.967196</td>\n      <td>0</td>\n      <td>0.265837</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>820</th>\n      <td>Mitchell, Mr. Henry Michael</td>\n      <td>male</td>\n      <td>7.200000</td>\n      <td>2nd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>24580.0</td>\n      <td>2.312535</td>\n      <td>0</td>\n      <td>0.321185</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>53</th>\n      <td>Artagaveytia, Mr. Ramon</td>\n      <td>male</td>\n      <td>7.100000</td>\n      <td>1st</td>\n      <td>C</td>\n      <td>Argentina</td>\n      <td>17609.0</td>\n      <td>3.893861</td>\n      <td>0</td>\n      <td>0.548431</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>456</th>\n      <td>Goldschmidt, Mr. George B.</td>\n      <td>male</td>\n      <td>7.100000</td>\n      <td>1st</td>\n      <td>C</td>\n      <td>United States</td>\n      <td>17754.0</td>\n      <td>3.530180</td>\n      <td>0</td>\n      <td>0.497208</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>282</th>\n      <td>Crosby, Captain. Edward Gifford</td>\n      <td>male</td>\n      <td>7.000000</td>\n      <td>1st</td>\n      <td>S</td>\n      <td>United States</td>\n      <td>5735.0</td>\n      <td>4.262680</td>\n      <td>0</td>\n      <td>0.608954</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1182</th>\n      <td>Tannūs, Master. As'ad</td>\n      <td>male</td>\n      <td>0.041667</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Lebanon</td>\n      <td>2625.0</td>\n      <td>2.091913</td>\n      <td>1</td>\n      <td>50.205923</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>296</th>\n      <td>Danbom, Master. Gilbert Sigvard Emanuel</td>\n      <td>male</td>\n      <td>0.033333</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>Sweden</td>\n      <td>347080.0</td>\n      <td>2.644755</td>\n      <td>0</td>\n      <td>79.342661</td>\n      <td>child</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>316</th>\n      <td>Dean, Miss. Elizabeth Gladys 'Millvina'</td>\n      <td>female</td>\n      <td>0.016667</td>\n      <td>3rd</td>\n      <td>S</td>\n      <td>England</td>\n      <td>2315.0</td>\n      <td>3.001247</td>\n      <td>1</td>\n      <td>180.074822</td>\n      <td>child</td>\n      <td>1</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>439</th>\n      <td>Gheorgheff, Mr. Stanio</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Bulgaria</td>\n      <td>349254.0</td>\n      <td>1.970059</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n    <tr>\n      <th>677</th>\n      <td>Kraeff, Mr. Theodor</td>\n      <td>male</td>\n      <td>NaN</td>\n      <td>3rd</td>\n      <td>C</td>\n      <td>Bulgaria</td>\n      <td>349253.0</td>\n      <td>1.970059</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>passenger</td>\n    </tr>\n  </tbody>\n</table>\n<p>2207 rows × 13 columns</p>\n</div>\n```\n:::\n:::\n\n\n### **Summarizing** Rows\n\nSummarization of the rows of a dataset for column(s) of interest can take many different forms. This introduction will not be exhaustive, but certainly cover the basics.\n\n#### Summarizing a Quantitative Variable\n\nThere are a few descriptive statistics that can be computed directly including, but not limited to, the mean and median.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf_titanic[\"age\"].mean()\n\ndf_titanic[\"age\"].median()\n\ndf_titanic[[\"age\", \"fare\"]].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nage     3.043673\nfare    2.918311\ndtype: float64\n```\n:::\n:::\n\n\nWe can ask for a slightly more comprehensive description using `.describe()`\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndf_titanic[\"age\"].describe()\n\ndf_titanic.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>ticketno</th>\n      <th>fare</th>\n      <th>survived</th>\n      <th>nonsense</th>\n      <th>female</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2205.000000</td>\n      <td>1.316000e+03</td>\n      <td>1291.000000</td>\n      <td>2207.000000</td>\n      <td>1289.000000</td>\n      <td>2207.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>3.043673</td>\n      <td>2.842157e+05</td>\n      <td>2.918311</td>\n      <td>0.322157</td>\n      <td>2.147877</td>\n      <td>0.221568</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.215968</td>\n      <td>6.334726e+05</td>\n      <td>0.974452</td>\n      <td>0.467409</td>\n      <td>7.237694</td>\n      <td>0.415396</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.016667</td>\n      <td>2.000000e+00</td>\n      <td>1.108728</td>\n      <td>0.000000</td>\n      <td>0.265837</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.200000</td>\n      <td>1.426225e+04</td>\n      <td>1.971383</td>\n      <td>0.000000</td>\n      <td>0.742371</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.900000</td>\n      <td>1.114265e+05</td>\n      <td>2.645480</td>\n      <td>0.000000</td>\n      <td>0.936833</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.800000</td>\n      <td>3.470770e+05</td>\n      <td>3.435945</td>\n      <td>1.000000</td>\n      <td>1.260935</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>7.400000</td>\n      <td>3.101317e+06</td>\n      <td>6.238443</td>\n      <td>1.000000</td>\n      <td>180.074822</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNote that, by default, `.describe()` provides descriptive statistics for only the quantitative variables in the dataset.\n\nWe can enhance numerical summaries with `.groupby()`, which allows us to specify one or more variables that we'd like to **group** our work by.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndf_titanic[[\"age\", \"survived\"]].groupby(\"survived\").mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n    </tr>\n    <tr>\n      <th>survived</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3.083194</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2.960631</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-check-in .icon}\n\nWith 2-3 people around you, look up how you would compute the correlation between two quantitative variables in Python. Compute the correlation between the `age` and `fare` variables in the titanic dataset.\n\n:::\n\n#### Summarizing a Categorical Variable\n\nWhen it comes to categorical variables we're most often interested in **frequency distributions** (counts), **relative frequency distributions**, and **cross-tabulations**.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndf_titanic[\"class\"].unique()\n\ndf_titanic[\"class\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\ncount     2207\nunique       7\ntop        3rd\nfreq       709\nName: class, dtype: object\n```\n:::\n:::\n\n\nThe `.unique()` here allows us to see the unique values of the `class` variable. Notice that the results of `.describe()` on a categorical variable are much different.\n\nTo completely summarize a single categorical variable, we report the number of times each level appeared, or its **frequency**.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf_titanic[\"class\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nclass\n3rd                 709\nvictualling crew    431\n1st                 324\nengineering crew    324\n2nd                 284\nrestaurant staff     69\ndeck crew            66\nName: count, dtype: int64\n```\n:::\n:::\n\n\nInstead of reporting counts, we can also report proportions or probabilities, or the **relative frequencies**. We can calculate the relative frequencies by specifying `normalize=True` in `.value_counts()`.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndf_titanic[\"class\"].value_counts(normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nclass\n3rd                 0.321251\nvictualling crew    0.195288\n1st                 0.146806\nengineering crew    0.146806\n2nd                 0.128681\nrestaurant staff    0.031264\ndeck crew           0.029905\nName: proportion, dtype: float64\n```\n:::\n:::\n\n\nCross-tabulations are one way we can investigate possible relationships between categorical variables. For example, what can we say about the relationship between `gender` and `survival` on the Titanic?\n\n:::{.callout-check-in .icon}\n\nSummarize `gender` and `survival` individually by computing the frequency distributions of each.\n\n:::\n\nThis does not tell us how `gender` interacts with `survival`. To do that, we need to produce a *cross-tabulation*, or a \"cross-tab\" for short. (Statisticians tend to call this a *contingency table* or a *two-way table*.)\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\npd.crosstab(df_titanic[\"survived\"], df_titanic[\"gender\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>gender</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>survived</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>130</td>\n      <td>1366</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>359</td>\n      <td>352</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nA cross-tabulation of two categorical variables is a two-dimensional array, with the levels of one variable along the rows and the levels of the other variable along the columns. Each cell in this array contains the number of observations that had a particular combination of levels. So in the Titanic data set, there were 359 females who survived and 1366 males who died. From the cross-tabulation, we can see that there were more females who survived than not, while there were more males who died than not. Clearly, gender had a strong influence on survival because of the Titanic's policy of \"women and children first\".\n\nTo get probabilities instead of counts, we specify `normalize=True`.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\npd.crosstab(df_titanic[\"survived\"], df_titanic[\"gender\"], normalize=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>gender</th>\n      <th>female</th>\n      <th>male</th>\n    </tr>\n    <tr>\n      <th>survived</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.058903</td>\n      <td>0.618940</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.162664</td>\n      <td>0.159493</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::{.callout-check-in .icon}\n\nWhat about conditional proportions? With 2-3 people around you, discuss how you would compute *the proportion of females that survived* and *the proportion of males that survived* and then do it. \n\nNote, there are multiple ways to do this.\n\n:::\n\n\n::: {.callout-practice-exercise .icon}\nOpen up [this colab notebook](https://colab.research.google.com/drive/1JnbwwQG7GW6cu_kGNggo0U8SLFTvTLfR?usp=sharing) and make a copy.\n\nFill out the sections where indicated, render it to html with Quarto, and push your final notebook and html document to a repository on GitHub (same one as Practice Activity 1.1 is good). Then share this repository link in the quiz question.\n:::\n\n",
    "supporting": [
      "03-basic_data_operations_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}