{
  "hash": "cd9bd64f53e2f392dfdc283cd4535300",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Visualization in Python\"\n---\n\n\n## Introduction\n\nThis document demonstrates the use of the `plotnine` library in Python to visualize data via the *grammar of graphics* framework.\n\nThe functions in `plotnine` originate from the `ggplot2` R package, which is the R implementation of the grammar of graphics.\n\n## Grammar of Graphics\n\nThe *grammar of graphics* is a framework for creating data visualizations.\n\nA visualization consists of:\n\n-   The **aesthetic**: Which *variables* are dictating which *plot elements*.\n\n-   The **geometry**: What *shape* of plot your are making.\n\nFor example, the plot below displays some of the data from the [Palmer Penguins data set](https://www.kaggle.com/datasets/parulpandey/palmer-archipelago-antarctica-penguin-data).\n\nFirst, though, we need to load the Palmer Penguins dataset.\n\n::: callout-note\nIf you do not have the `pandas` library installed then you will need to run\n\n`pip install pandas`\n\nin the Jupyter terminal to install. Same for any other libraries you haven't installed.\n:::\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plotnine import ggplot, geom_point, aes, geom_boxplot\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\npenguins = load_penguins()\n\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-3-1.png){width=614}\n:::\n:::\n\n\nThe **aesthetic** is **species** on the x-axis, **bill_length_mm** on the y-axis, colored by **species**.\n\nThe **geometry** is a **boxplot**.\n\n::: {.callout-check-in .icon}\nTake a look at the first page of the optional reading for `plotnine`. In groups of 3-4, discuss the differences between how they use `plotnine` and the way we used it in the code chunk above.\n:::\n\n## plotnine (i.e. ggplot)\n\nThe `plotnine` library implements the *grammar of graphics* in Python.\n\nCode for the previous example:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n:::\n\n\n### The aesthetic\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(                           # <1>\n  x = \"species\",               # <2>\n  y = \"bill_length_mm\",        # <2>\n  fill = \"species\"))           # <2>\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-5-3.png){width=614}\n:::\n:::\n\n\n1.  The `aes()` function is the place to specify aesthetics.\n2.  `x`, `y`, and `fill` are three possible aesthetics that can be specified, that map variables in our data set to plot elements.\n\n### The geometry\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"species\"))\n+ geom_boxplot() # <1>\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-6-5.png){width=614}\n:::\n:::\n\n\n1.  A variety of `geom_*` functions allow for different plotting shapes (e.g. boxplot, histogram, etc.)\n\n### Other optional elements:\n\n-   The *scales* of the x- and y-axes.\n\n-   The *color* of elements that are not mapped to aesthetics.\n\n-   The *theme* of the plot\n\n...and many more!\n\n### Scales\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-7-7.png){width=614}\n:::\n:::\n\n\n**versus**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import scale_y_reverse\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n+ scale_y_reverse()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-8-9.png){width=614}\n:::\n:::\n\n\n### Non-aesthetic colors\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-9-11.png){width=614}\n:::\n:::\n\n\n**versus**\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot(fill = \"cornflowerblue\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-10-13.png){width=614}\n:::\n:::\n\n\n:::{.callout-check-in .icon}\nWhat will this show?\n:::\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"cornflowerblue\"))\n+ geom_boxplot()\n)\n```\n:::\n\n\n### Themes\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-12-15.png){width=614}\n:::\n:::\n\n\n**versus**\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import theme_classic\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n+ theme_classic()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-13-17.png){width=614}\n:::\n:::\n\n\n::: {.callout-example .icon}\nWhat are the differences between the two plots above? What did the theme change?\n:::\n\n::: {.callout-check-in .icon}\nWhat are the *aesthetics*, *geometry*, *scales*, and other options in the cartoon plot below?\n\n![An xkcd comic of time spent going up the down escalator](images/xkcd.png)\n:::\n\n::: {.callout-learn-more .icon}\n-   Scales: <https://ggplot2-book.org/scale-position.html>\n\n-   Themes: <https://ggplot2-book.org/polishing.html>\n:::\n\n## Geometries: The \"Big Five\"\n\n### 1. Bar Plots\n\nMost often used for showing **counts** of a **categorical variable**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import geom_bar\n(ggplot(penguins,\naes(\n  x = \"species\"\n))\n+ geom_bar()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-14-19.png){width=614}\n:::\n:::\n\n\n... or **relationships** between **two categorical variables**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"sex\"\n))\n+ geom_bar()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-15-21.png){width=614}\n:::\n:::\n\n\nWould we rather see percents?\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"island\"\n))\n+ geom_bar(position = \"fill\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-16-23.png){width=614}\n:::\n:::\n\n\nOr side-by-side?\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"island\"\n))\n+ geom_bar(position = \"dodge\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-17-25.png){width=614}\n:::\n:::\n\n\n::: {.callout-example .icon}\nCompare and contrast the plots above? What information is lost or gained between each of them?\n:::\n\n### 2. Boxplots\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\"\n))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-18-27.png){width=614}\n:::\n:::\n\n\nSide-by-side using a categorical variable:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"sex\"\n))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-19-29.png){width=614}\n:::\n:::\n\n\n### 3. Histograms\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import geom_histogram\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-20-31.png){width=614}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram(bins = 100)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-21-33.png){width=614}\n:::\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram(bins = 10)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-22-35.png){width=614}\n:::\n:::\n\n\n### 3.5 Densities\n\nSuppose you want to compare histograms by **category**:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_histogram()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-23-37.png){width=614}\n:::\n:::\n\n\nCleaner: smoothed histogram, or density:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import geom_density\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_density()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-24-39.png){width=614}\n:::\n:::\n\n\nEven cleaner: The **alpha** option:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_density(alpha = 0.5)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-25-41.png){width=614}\n:::\n:::\n\n\n### 4. Scatterplots\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  y = \"bill_depth_mm\"\n))\n+ geom_point()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-26-43.png){width=614}\n:::\n:::\n\n\nColors for extra information:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  y = \"bill_depth_mm\",\n  color = \"species\"\n))\n+ geom_point()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-27-45.png){width=614}\n:::\n:::\n\n\n### 5. Line Plots\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import geom_line\npenguins2 = penguins.groupby([\"species\", \"sex\"])[[\"bill_length_mm\"]].mean().reset_index()\n\n(ggplot(penguins2,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  color = \"sex\",\n  group = \"sex\"\n))\n+ geom_point()\n+ geom_line()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-28-47.png){width=614}\n:::\n:::\n\n\n::: {.callout-learn-more .icon}\n-   `ggplot2` cheatsheet: <https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf>\n\n-   `plotnine`: <https://plotnine.readthedocs.io/en/stable/>\n:::\n\n## Multiple Plots\n\n### Facet Wrapping\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import facet_wrap\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\"\n))\n+ geom_boxplot()\n+ facet_wrap(\"sex\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-29-49.png){width=614}\n:::\n:::\n\n\n::: {.callout-practice-exercise .icon}\nOpen up [this colab notebook](https://colab.research.google.com/drive/1LDt_ALySdbxGZbWEQe8dTx_L9QTC5jcU?usp=sharing) and make a copy.\n\nFill out the sections where indicated, render it to html with Quarto, and push your final notebook and html document to a repository on GitHub. Then share this repository link in the quiz question.\n:::\n\n## Visualization and GenAI\n\nIn our experience, generative AI can help with the data visualization process in two major ways:\n\n### 1. Brainstorming possible visualizations for a particular research question.\n\nSometimes, it can be hard to imagine what a plot will look like or which geometries to use - you sink time into writing out your code, only to be disappointed when the resulting image is not as compelling as you hoped.\n\nWith careful prompting, many genAI tools can suggest plot types and then \"preview\" these plot ideas for you.  There are some limitations, however:\n\n1. When asking for this service, make sure to ask for the **code output** specifically.  In one attempt to demonstrate this task, I carelessly used the phrase \"sketch a plot\", and GPT-4o took the \"sketch\" command very seriously, as you can see below!\n\n![](./images/sketch_penguins.webp)\n\n2.  The GenAI does not have access to your specific dataset. That means the tool cannot fully preview how your plots might look *on your data*. What it can do, though, is **show comparable examples on another dataset**.\n\nThe goal here is not to fully produce your final visualization.  The goal is to get a general sense of what geometry options might fit your research question, and how each of those would look.\n\n::: {.callout-practice-exercise}\n\nOpen a GenAI tool that includes a python environment, such as Chat GPT-4o or Gemini. Try a prompt of the following form:\n\n> I would like to make a plot showing the different bill dimensions of different species of penguins.  Can you use a similar dataset to show me a few examples of python code and corresponding output to make plots like this?\n\nThen, imagine another dataset (maybe one that doesn't exist), and ask the genAI tool to show you plot examples for a particular research question.  What happens?\n:::\n\n### 2. Building code layer by layer.\n\n#### Initial plot\n\nIf you find it psychologically easier to edit code than to start from scratch, genAI can be very adept at producing basic visualization code for you to build on.  [This chat](https://chatgpt.com/share/671202e0-026c-8012-b770-34ea6bf18f65) shows a very quick example.\n\n#### Specific syntax to tweak your visual\n\nOnce you have your basic plot code, the genAI tool becomes an excellent reference/documentation for how to add layers and make tweaks.  For example, suppose in the above example we wanted to see the bill lengths on a logarithmic scale.  In [this chat](https://chatgpt.com/share/671202e0-026c-8012-b770-34ea6bf18f65), we see how easily Chat GPT-4o is able to add the `ggplot` layer of `+ scale_y_log10()`\n\n#### Principles\n\nSince this use of AI involves asking it to write actual code for you, remember the **WEIRDER** principles:\n\n**Well-specified:** The more specifically we can describe our plot, the better resulting code you will get.  Make sure to mention which *plotting library* you want to use, what *geometry* you are using, and what your *variable mappings* are.\n\n**Editable:** Don't try to get the AI tool to create your final perfect polished visualization from the first prompt; this can lead to overly complicated code that is hard to tweak.  Instead, add complexity bit by bit, checking at each step for ways to improve or clarify the AI-generated code.\n\n**Interpretable:** The AI tool will sometimes leap to conclusions about the plot, making unprompted changes to the titles, the scales, or the theme.  Make sure you review each *layer* of the `ggplot` process, and ensure that it is indeed what you intended.\n\n**Reproducible:** Sometimes, when you ask for a particular small visual change, the AI will achieve this task manually.  For example, if you ask for particular labels on the x-axis, it may choose to remove all labels and put numbers in \"by hand\", rather than generally changing the `scale`.  *(Look for an example of this with the facet titles in the activity at the end of this section!)*\n\nEven if the AI-generated code achieves the visual you hoped for, make sure to review the code for instances where you need to replace sloppy solutions with cleaner ones.\n\n**Dependable:** The good news is, *unit testing* in visualization is easy: simply run the code and see if the output looks how you hoped!\n\n**Ethical:** Just because an LLM suggests a visual doesn't mean it is a responsible one.  You, as the human creator, must review your visualizations to ensure they are not conveying any harmful information or impressions.\n\n**References:** If you use AI-generated code in your visualization, you **absolutely must** state this up front in your work, even if you heavily edit the initial code.\n\n### Try it out\n\n::: {.callout-practice-exercise}\n\nTry to construct code to replicate the plot below by using only AI prompts.  You may ask specifically for `plotnine` code, but beyond that, you may not mention any specific functions or argument names.\n\nInstead, use statements that reference the Grammar of Graphics, like \"The x-axis is mapped to bill length\" or \"The color scale for the species is Red, Yellow, Orange.\"\n\nDo your best to achieve this *without* un-folding the code to see how I constructed the plot; but if you are stuck you may look at it.\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\n\npenguins = load_penguins()\n\nfrom plotnine import *\n\n(\n    ggplot(penguins.dropna(), aes(x=\"species\", y=\"body_mass_g\", fill=\"species\"))\n    + geom_violin(alpha=0.5)\n    + geom_jitter()\n    + facet_wrap(\"sex\")\n    + scale_fill_discrete(guide=None)\n    + labs(x=\"\", y=\"\", title=\"Body mass (g) of different penguins species by sex.\")\n    + theme_bw()\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Figure Size: (640 x 480)>\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](02-plotnine_files/figure-html/unnamed-chunk-30-51.png){width=614}\n:::\n:::\n\n::: {.callout-practice-exercise}\n\n[Click here](https://chatgpt.com/share/6711fb65-6884-8012-a9ff-9789f34b956a) to see my conversation with Chat GPT 4o.  Notice how my results improved when I used more specific Grammar of Graphics language.\n\nCompare the resulting code, and its output, to my hand-written code that made the original plot.  What is different?  What ways did GenAI make things easier, and in what ways did it overcomplicate a step?\n\n:::\n\n",
    "supporting": [
      "02-plotnine_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}