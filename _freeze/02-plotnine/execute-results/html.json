{
  "hash": "bb649d1e6f752e79f27633c973d1081a",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization in Python\"\n---\n\n## Introduction\n\nThis document demonstrates the use of the `plotnine` library in Python to visualize data via the *grammar of graphics* framework.\n\nThe functions in `plotnine` originate from the `ggplot2` R package, which is the R implementation of the grammar of graphics.\n\n## Grammar of Graphics\n\nThe *grammar of graphics* is a framework for creating data visualizations.\n\nA visualization consists of:\n\n-   The **aesthetic**: Which *variables* are dictating which *plot elements*.\n\n-   The **geometry**: What *shape* of plot your are making.\n\nFor example, the plot below displays some of the data from the [Palmer Penguins data set](https://www.kaggle.com/datasets/parulpandey/palmer-archipelago-antarctica-penguin-data).\n\nFirst, though, we need to load the Palmer Penguins dataset.\n\n::: callout-note\nIf you do not have the `pandas` library installed then you will need to run\n\n`pip install pandas`\n\nin the Jupyter terminal to install. Same for any other libraries you haven't installed.\n:::\n\n``` {.python .cell-code}\nimport pandas as pd\nfrom palmerpenguins import load_penguins\nfrom plotnine import ggplot, geom_point, aes, geom_boxplot\n```\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins = load_penguins()\n\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-3-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nThe **aesthetic** is **species** on the x-axis, **bill_length_mm** on the y-axis, colored by **species**.\n\nThe **geometry** is a **boxplot**.\n\n::: {.callout-check-in .icon}\nTake a look at the first page of the optional reading for `plotnine`. In groups of 3-4, discuss the differences between how they use `plotnine` and the way we used it in the code chunk above.\n:::\n\n## plotnine (i.e. ggplot)\n\nThe `plotnine` library implements the *grammar of graphics* in Python.\n\nCode for the previous example:\n\n``` {.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n\n### The aesthetic\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n(ggplot(penguins, \naes(                           # <1>\n  x = \"species\",               # <2>\n  y = \"bill_length_mm\",        # <2>\n  fill = \"species\"))           # <2>\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-5-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n1.  The `aes()` function is the place to specify aesthetics.\n2.  `x`, `y`, and `fill` are three possible aesthetics that can be specified, that map variables in our data set to plot elements.\n\n### The geometry\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n(ggplot(penguins, \naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"species\"))\n+ geom_boxplot() # <1>\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-6-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n1.  A variety of `geom_*` functions allow for different plotting shapes (e.g. boxplot, histogram, etc.)\n\n### Other optional elements:\n\n-   The *scales* of the x- and y-axes.\n\n-   The *color* of elements that are not mapped to aesthetics.\n\n-   The *theme* of the plot\n\n...and many more!\n\n### Scales\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-7-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n**versus**\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfrom plotnine import scale_y_reverse\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n+ scale_y_reverse()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-8-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n### Non-aesthetic colors\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-9-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n**versus**\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot(fill = \"cornflowerblue\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-10-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n:::{.callout-check-in .icon}\nWhat will this show?\n:::\n\n``` {.python .cell-code}\n(ggplot(penguins, \naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"cornflowerblue\"))\n+ geom_boxplot()\n)\n```\n\n\n### Themes\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-12-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n**versus**\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfrom plotnine import theme_classic\n(ggplot(penguins, aes(x = \"species\", y = \"bill_length_mm\", fill = \"species\"))\n+ geom_boxplot()\n+ theme_classic()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-13-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n::: {.callout-example .icon}\nWhat are the differences between the two plots above? What did the theme change?\n:::\n\n::: {.callout-check-in .icon}\nWhat are the *aesthetics*, *geometry*, *scales*, and other options in the cartoon plot below?\n\n![An xkcd comic of time spent going up the down escalator](images/xkcd.png)\n:::\n\n::: {.callout-learn-more .icon}\n-   Scales: <https://ggplot2-book.org/scale-position.html>\n\n-   Themes: <https://ggplot2-book.org/polishing.html>\n:::\n\n## Geometries: The \"Big Five\"\n\n### 1. Bar Plots\n\nMost often used for showing **counts** of a **categorical variable**:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nfrom plotnine import geom_bar\n(ggplot(penguins,\naes(\n  x = \"species\"\n))\n+ geom_bar()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-14-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n... or **relationships** between **two categorical variables**:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"sex\"\n))\n+ geom_bar()\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'str' and 'float'\n```\n:::\n:::\n\n\nWould we rather see percents?\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"island\"\n))\n+ geom_bar(position = \"fill\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-16-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nOr side-by-side?\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  fill = \"island\"\n))\n+ geom_bar(position = \"dodge\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-17-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n::: {.callout-example .icon}\nCompare and contrast the plots above? What information is lost or gained between each of them?\n:::\n\n### 2. Boxplots\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\"\n))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-18-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nSide-by-side using a categorical variable:\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  fill = \"sex\"\n))\n+ geom_boxplot()\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: '<' not supported between instances of 'str' and 'float'\n```\n:::\n:::\n\n\n### 3. Histograms\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nfrom plotnine import geom_histogram\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-20-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram(bins = 100)\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-21-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\"\n))\n+ geom_histogram(bins = 10)\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-22-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n### 3.5 Densities\n\nSuppose you want to compare histograms by **category**:\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_histogram()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-23-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nCleaner: smoothed histogram, or density:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nfrom plotnine import geom_density\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_density()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-24-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nEven cleaner: The **alpha** option:\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  fill = \"species\"\n))\n+ geom_density(alpha = 0.5)\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-25-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n### 4. Scatterplots\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  y = \"bill_depth_mm\"\n))\n+ geom_point()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-26-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\nColors for extra information:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n(ggplot(penguins,\naes(\n  x = \"bill_length_mm\",\n  y = \"bill_depth_mm\",\n  color = \"species\"\n))\n+ geom_point()\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-27-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n### 5. Line Plots\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nfrom plotnine import geom_line\npenguins2 = penguins.groupby(by = [\"species\", \"sex\"]).mean()\n\n(ggplot(penguins2,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\",\n  color = \"sex\"\n))\n+ geom_point()\n+ geom_line()\n)\n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: agg function failed [how->mean,dtype->object]\n```\n:::\n:::\n\n\n::: {.callout-learn-more .icon}\n-   `ggplot2` cheatsheet: <https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf>\n\n-   `plotnine`: <https://plotnine.readthedocs.io/en/stable/>\n:::\n\n## Multiple Plots\n\n### Facet Wrapping\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nfrom plotnine import facet_wrap\n(ggplot(penguins,\naes(\n  x = \"species\",\n  y = \"bill_length_mm\"\n))\n+ geom_boxplot()\n+ facet_wrap(\"sex\")\n)\n```\n\n::: {.cell-output .cell-output-display}\n![](02-plotnine_files/figure-html/cell-29-output-1.png){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n<Figure Size: (640 x 480)>\n```\n:::\n:::\n\n\n::: {.callout-practice-exercise .icon}\nOpen up [this colab notebook](https://colab.research.google.com/drive/1LDt_ALySdbxGZbWEQe8dTx_L9QTC5jcU?usp=sharing) and make a copy.\n\nFill out the sections where indicated, render it to html with Quarto, and push your final notebook and html document to a repository on GitHub (same one as Practice Activity 1.1 is good). Then share this repository link in the quiz question.\n:::\n\n",
    "supporting": [
      "02-plotnine_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}